library(sfencode)
library(sfencode)
sfencode:::encodeGeometry(sf)
devtools::use_testthat()
devtools::use_vignette()
devtools::use_vignette("sfencode")
library(sfencode)
library(sf)
df <- data.frame(myId = c(1,1,1,1,1,1,1,1,2,2,2,2),
lineId = c(1,1,1,1,2,2,2,2,1,1,1,2),
lon = c(-80.190, -66.118, -64.757, -80.190,  -70.579, -67.514, -66.668, -70.579, -70, -49, -51, -70),
lat = c(26.774, 18.466, 32.321, 26.774, 28.745, 29.570, 27.339, 28.745, 22, 23, 22, 22))
p1 <- as.matrix(df[1:4, c("lon", "lat")])
p2 <- as.matrix(df[5:8, c("lon", "lat")])
p3 <- as.matrix(df[9:12, c("lon", "lat")])
point <- sf::st_sfc(sf::st_point(x = c(df[1,"lon"], df[1,"lat"])))
# multipoint <- sf::st_sfc(sf::st_multipoint(x = as.matrix(df[1:2, c("lon", "lat")])))
polygon <- sf::st_sfc(sf::st_polygon(x = list(p1, p2)))
linestring <- sf::st_sfc(sf::st_linestring(p3))
multilinestring <- sf::st_sfc(sf::st_multilinestring(list(p3, p3)))
sf <- rbind(
st_sf(geo = polygon),
st_sf(geo = multilinestring),
st_sf(geo = linestring),
st_sf(geo = point)
)
sfencode:::encodeGeometry(sf)
sfencode:::encodeGeometry(st_geometry(sf))
library(sfencode)
sfencode:::encodeGeometry(st_geometry(sf))
sfencode:::encodeGeometry("")
sessionInfo()
library(sfencode)
sfencode:::encodeGeometry(st_geometry(sf))
devtools::document()
library(sfencode)
library(sf)
df <- data.frame(myId = c(1,1,1,1,1,1,1,1,2,2,2,2),
lineId = c(1,1,1,1,2,2,2,2,1,1,1,2),
lon = c(-80.190, -66.118, -64.757, -80.190,  -70.579, -67.514, -66.668, -70.579, -70, -49, -51, -70),
lat = c(26.774, 18.466, 32.321, 26.774, 28.745, 29.570, 27.339, 28.745, 22, 23, 22, 22))
p1 <- as.matrix(df[1:4, c("lon", "lat")])
p2 <- as.matrix(df[5:8, c("lon", "lat")])
p3 <- as.matrix(df[9:12, c("lon", "lat")])
point <- sf::st_sfc(sf::st_point(x = c(df[1,"lon"], df[1,"lat"])))
# multipoint <- sf::st_sfc(sf::st_multipoint(x = as.matrix(df[1:2, c("lon", "lat")])))
polygon <- sf::st_sfc(sf::st_polygon(x = list(p1, p2)))
linestring <- sf::st_sfc(sf::st_linestring(p3))
multilinestring <- sf::st_sfc(sf::st_multilinestring(list(p3, p3)))
sf <- rbind(
st_sf(geo = polygon),
st_sf(geo = multilinestring),
st_sf(geo = linestring),
st_sf(geo = point)
)
sfencode:::encodeGeometry(st_geometry(sf))
library(sfencode)
sfencode:::encodeGeometry(st_geometry(sf))
library(sfencode)
encodeSf(sf)
str(sf)
library(sfencode)
library(sfencode)
encodeSf(sf)
library(sfencode)
encodeSf(sf)
class(st_geometry(sf))
library(sfencode)
encodeSf(sf)
encodeSf(st_geometry(sf))
library(sfencode)
encodeSf(st_geometry(sf))
encodeSf(sf)
st_geometry(sf) <- NULL
sf
class(sf)
sf <- rbind(
st_sf(geo = polygon),
st_sf(geo = multilinestring),
st_sf(geo = linestring),
st_sf(geo = point)
)
sf
library(sfencode)
encodeSf(sf)
library(sfencode)
encodeSf(sf)
library(sfencode)
sf2 <- encodeSf(sf)
sf2
str(sf2)
sf2
library(sfencode)
sf2 <- encodeSf(sf)
sf2
str(sf2)
library(sfencode)
sf2 <- encodeSf(sf)
sf2
str(sf2)
library(sfencode)
sf2 <- encodeSf(sf)
sf
sf2
sf::st_sfc()
library(sfencode)
sf::st_sfc()
sf2 <- encodeSf(sf)
library(sfencode)
sf2 <- encodeSf(sf)
sf2
str(sf2)
sf2$id <- 1:4
sf2
mapKey <- read.dcf("~/Documents/.googleAPI", field = "GOOGLE_MAP_KEY")
google_map(key = mapKey) %>% add_polylines(data = sf2, polyline = "encode")
library(googleway)
google_map(key = mapKey) %>% add_polylines(data = sf2, polyline = "encode")
str(sf2)
sf$polyline <- sf$geo[[1]]
sf
sf2$polyline <- sf2$geo[[1]]
sf2
sf2$polyline <- sf2$geo[[1]]
sf2
sf2$polyline <- sf2$encode[[1]]
sf2
google_map(key = mapKey) %>% add_polylines(data = sf2, polyline = "polyline")
str(sf2)
library(sfencode)
encodeSf(sf)
sf$polyline <- NULL
encodeSf(sf)
library(sfencode)
encodeSf(sf)
library(sfencode)
encodeSf(sf)
library(sfencode)
encodeSf(sf)
library(sfencode)
encodeSf(sf)
sf
encodeSf(sf)
library(sfencode)
encodeSf(sf)
sf
encodeSf(sf)
library(sfencode)
sf2 <- encodeSf(sf)
sf2
sf
sf2
object.size(sf)
object.size(sf2)
st_geometry(sf)
names(st_geometry(sf))
sf
sf[[attr(sf, 'sf_column')]]
names(sf[[attr(sf, 'sf_column')]])
attr(sf, "sf_column")
geomCol <- attr(sf, "sf_column")
encodeGeometry(sf[, geomCol])
sfencode:::encodeGeometry(sf[, geomCol])
sf[, geomCol]
st_geometry(sf)
encodeGeometry(sf[[geomCol]])
sfencode:::encodeGeometry(sf[[geomCol]])
library(sfencode)
sf2 <- encodeSf(sf)
sf
sf2
object.size(sf2)
object.size(sf)
library(sfencode)
sf2 <- encodeSf(sf)
sf2
library(sfencode)
sf2 <- encodeSf(sf)
sf2
str(sf2)
library(sfencode)
sf2 <- encodeSf(sf)
sf2
str(sf2)
attr(sf$geo, 'class')
attr(sf2$geo, 'class')
attr(sf2$geo, 'class') <- letters[1:4]
sf2
str(sf2)
str(sf2[1,])
class(sf2[1,])
class(sf2[1, "geo"])
attr(sf2[[geomCol]], 'class') <- c("list", "xxx")
sf2
class(sf2[[geomCol]])
library(sfencode)
sf
class(sf[['geo']])
class(sf)
sf2 <- encodeSf(sf)
sf2
str(sf2[['geo']])
str(sf2[1,'geo'])
str(sf2[1:2,'geo'])
class(sf2[1:2,'geo'])
class(sf2[1:2,"geo"])
sf2
sf2[['geo']]
sf2 <- encodeSf(sf)
sf2
sf2[['geo']]
nc <- st_read(system.file("shape/nc.shp", package="sf"))
nce <- encodeSf(nc)
nce
str(nce)
str(nc)
head(nce)
str(nce)
str(nce[1,])
str(nce[1:2,])
str(nce[1:3,])
str(nce[1:3,'geometry'])
attr(nce[1:3,'geometry'], 'class')
attr(nce[1,'geometry'], 'class')
attr(nce[['geometry']][[1]], 'class')
nce[['geometry']]
sf
sf2
library(sfencode)
nce <- encodeSf(nc)
nce
str(nce)
head(nce)
google_map(key = mapKey) %>% add_polygons(data = nce, polyline = "geometry")
names(nce)
nce[, 'geometry']
google_map(key = mapKey) %>% add_polygons(data = nce, polyline = "geometry")
class(nce)
google_map(key = mapKey) %>% add_polygons(data = nce[1,], polyline = "geometry")
?add_polygons
pl_outer <- encode_pl(lat = c(25.774, 18.466,32.321),
lon = c(-80.190, -66.118, -64.757))
pl_inner <- encode_pl(lat = c(28.745, 29.570, 27.339),
lon = c(-70.579, -67.514, -66.668))
df <- data.frame(id = c(1, 1),
polyline = c(pl_outer, pl_inner),
stringsAsFactors = FALSE)
df
df <- aggregate(polyline ~ id, data = df, list)
df
df
str(df)
str(nce[1,])
google_map(key = mapKey) %>% add_polygons(data = df, polyline = "polyline")
str(df)
str(nce[1,])
df[1]
df[1,]
nce[1,]
nce[1, 'geometry']
nce[1, 'polyline']
df[1, 'polyline']
str(df[1, 'polyline'])
str(nce[1, 'geometry'])
object.size(nce)
object.size(nc)
head(nce)
google_map(key = mapKey) %>% add_polygons(data = nce[1,], polyline = "geometry")
nce$polyline <- nce$geometry
google_map(key = mapKey) %>% add_polygons(data = nce[1,], polyline = "geometry")
nce$polyline <- NULL
nce$polyline <- nce$geometry
google_map(key = mapKey) %>% add_polygons(data = nce[1,], polyline = "polyline")
library(googleway)
google_map(key = mapKey) %>% add_polygons(data = nce[1,], polyline = "geometry")
head(nce)
names(nce[1,])
google_map(key = mapKey) %>% add_polygons(data = nce[1,], polyline = "geometry")
library(googleway)
google_map(key = mapKey) %>% add_polygons(data = nce[1,], polyline = "geometry")
google_map(key = mapKey) %>% add_polygons(data = nce[1,], polyline = "geometry", fill_colour = "geometry")
str(nce)
nce[1, ]
nc
nce <- sfencode::encodeSf(nc)
attr(nc, 'sf_column')
library(sfencode)
nce <- sfencode::encodeSf(nc)
str(nce)
str(nce[1,])
mapKey <- read.dcf("~/Documents/.googleAPI", field = "GOOGLE_MAP_KEY")
google_map(key = mapKey) %>%
add_polygons(data = nce, polyline = "geometry")
head(nce)
library(sfencode)
google_map(key = mapKey) %>%
add_polygons(data = nce, polyline = "geometry", fill_colour = "AREA")
object.size(nce)
object.size(nc)
library(spatialdatatable)
library(microbenchmark)
microbenchmark(
sdt = { spatialdatatable::EncodeSF(nc) },
esf = { sfencode::encodeSf(nc) },
times = 5
)
microbenchmark(
sdt = { spatialdatatable::EncodeSF(nc) },
esf = { sfencode::encodeSf(nc) },
times = 5
)
microbenchmark(
sdt = { spatialdatatable::EncodeSF(nc) },
esf = { sfencode::encodeSf(nc) },
times = 50
)
spatialdatatable::EncodeSF
spatialdatatable:::encodeSf.sf
sfencode::encodeSf
microbenchmark(
sdt = { spatialdatatable::EncodeSF(nc) },
esf = { sfencode::encodeSf(nc) },
times = 5
)
microbenchmark(
sdt = { spatialdatatable::EncodeSF(nc) },
esf = { sfencode::encodeSf(nc) },
times = 5
)
microbenchmark(
sdt = { spatialdatatable::EncodeSF(nc) },
esf = { sfencode::encodeSf(nc) },
times = 5
)
head(nc)
str(nc)
head(nc)
nc <- st_read(system.file("shape/nc.shp", package="sf"))
library(sf)
nc <- st_read(system.file("shape/nc.shp", package="sf"))
microbenchmark(
sdt = { spatialdatatable::EncodeSF(nc) },
esf = { sfencode::encodeSf(nc) },
times = 5
)
microbenchmark(
sdt = { spatialdatatable::EncodeSF(nc) },
esf = { sfencode::encodeSf(nc) },
times = 5
)
library(sfencode)
encodeSf(nc)
sfencode::encodeSf(nc)
library(sfencode)
library(sfencode)
str(nc)
head(nc)
microbenchmark(
sdt = { spatialdatatable::EncodeSF(nc) },
esf = { sfencode::encodeSf(nc) },
times = 5
)
microbenchmark(
sdt = { spatialdatatable::EncodeSF(nc) },
esf = { sfencode::encodeSf(nc) },
times = 5
)
microbenchmark(
sdt = { spatialdatatable::EncodeSF(nc) },
esf = { sfencode::encodeSf(nc) },
times = 5
)
sfencode::encodeSf(nc)
nc
sfencode::encodeSf(nc)
library(sfencode)
sfencode::encodeSf(nc)
sfencode::encodeSf(nc)
nce <- sfencode::encodeSf(nc)
nce
library(sfencode)
sfencode::encodeSf(nc)
nce <- sfencode::encodeSf(nc)
str(nce)
library(sfencode)
sfencode::encodeSf(nc)
library(sfencode)
sfencode::encodeSf(nc)
microbenchmark(
sdt = { spatialdatatable::EncodeSF(nc) },
esf = { sfencode::encodeSf(nc) },
times = 5
)
microbenchmark(
sdt = { spatialdatatable::EncodeSF(nc) },
esf = { sfencode::encodeSf(nc) },
times = 5
)
microbenchmark(
sdt = { spatialdatatable::EncodeSF(nc) },
esf = { sfencode::encodeSf(nc) },
times = 5
)
microbenchmark(
sdt = { spatialdatatable::EncodeSF(nc) },
esf = { sfencode::encodeSf(nc) },
times = 5
)
microbenchmark(
sdt = { spatialdatatable::EncodeSF(nc) },
esf = { sfencode::encodeSf(nc) },
times = 5
)
devtools::check()
install.packages("testthat")
install.packages("testthat")
install.packages("testthat")
install.packages("cli")
install.packages("crayon")
install.packages("cli")
install.packages("crayon")
install.packages("testthat")
devtools::check()
install.packages("covr")
library(googlePolylines)
library(googlePolylines)
devtools::test()
install.packages("sf")
devtools::test()
